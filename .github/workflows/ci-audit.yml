name: JungleBook â€“ Build â€¢ Audit â€¢ Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      promote_prod:
        description: "Promote last staging deploy to production?"
        type: boolean
        default: false

concurrency:
  group: junglebook-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  deployments: write
  id-token: write

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.12"
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  discover:
    name: Discover apps
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Find apps/*
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          APPS=()
          for d in apps/*; do
            [ -d "$d" ] || continue
            slug="$(basename "$d")"
            APPS+=("{\"slug\":\"$slug\"}")
          done
          if [ ${#APPS[@]} -eq 0 ]; then
            echo '{"include":[]}' > matrix.json
          else
            printf '{"include":[%s]}\n' "$(IFS=,; echo "${APPS[*]}")" > matrix.json
          fi
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"

  build_audit:
    name: Build & Audit (${{ matrix.slug }})
    runs-on: ubuntu-latest
    needs: discover
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    defaults:
      run:
        working-directory: apps/${{ matrix.slug }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            apps/${{ matrix.slug }}/package-lock.json
            apps/${{ matrix.slug }}/npm-shrinkwrap.json

      - name: Install Node deps
        run: |
          if [ -f package.json ]; then npm ci; else echo "No package.json â€“ skipping"; fi

      - name: Build App (strict)
        run: |
          if [ -f package.json ]; then npm run build || (echo "::error::Build failed" && exit 1); fi

      - name: Run Prettier (strict)
        run: |
          if [ -f package.json ]; then npx prettier --check .; fi

      - name: Run ESLint (soft)
        run: |
          if [ -f package.json ]; then npx eslint . --ext .js,.jsx,.ts,.tsx || true; fi

      - name: Run TypeScript type check (soft)
        run: |
          if [ -f tsconfig.json ]; then npx tsc --noEmit || true; fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install JungleBook CLI
        working-directory: .
        run: |
          pip install -e .
          pip install black flake8 pip-audit pytest pytest-cov

      - name: Run Black (strict)
        run: black --check .

      - name: Run Flake8 (soft)
        run: flake8 jb || true

      - name: Run jb audit
        working-directory: .
        run: jb audit "${{ matrix.slug }}"

      - name: Python security scan (soft)
        run: pip-audit || true

      - name: Node security scan (soft)
        run: |
          if [ -f package.json ]; then npm audit --omit=dev || true; fi

      - name: Run Jest tests with coverage (soft)
        run: |
          if [ -f package.json ]; then npm test -- --coverage || true; fi

      - name: Run Pytest with coverage (soft)
        run: pytest --cov=jb --cov-report=xml || true

      - name: Run Lighthouse CI
        run: |
          if [ -d ".open-next/assets" ]; then
            npx lhci autorun \
              --collect.staticDistDir=.open-next/assets \
              --upload.target=filesystem \
              --upload.outputDir=./audit/lhci || true
          else
            echo "No .open-next/assets â€“ skipping Lighthouse"
          fi

      - name: Enforce Lighthouse thresholds (strict)
        run: |
          if [ -f audit/lhci/lhr-0.json ]; then
            perf=$(jq '.categories.performance.score * 100' audit/lhci/lhr-0.json)
            seo=$(jq '.categories.seo.score * 100' audit/lhci/lhr-0.json)
            a11y=$(jq '.categories.accessibility.score * 100' audit/lhci/lhr-0.json)
            if [ "$perf" -lt 90 ]; then echo "::error::Performance below 90 ($perf)"; exit 1; fi
            if [ "$seo" -lt 90 ]; then echo "::error::SEO below 90 ($seo)"; exit 1; fi
            if [ "$a11y" -lt 95 ]; then echo "::error::Accessibility below 95 ($a11y)"; exit 1; fi
          else
            echo "No Lighthouse results found"
          fi

      - name: Upload Audit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-${{ matrix.slug }}
          path: apps/${{ matrix.slug }}/audit/AuditReport.md

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.slug }}
          path: |
            apps/${{ matrix.slug }}/coverage/**
            coverage.xml
          if-no-files-found: ignore

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lhci-${{ matrix.slug }}
          path: apps/${{ matrix.slug }}/audit/lhci/**
          if-no-files-found: ignore

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.slug }}
          path: |
            apps/${{ matrix.slug }}/.open-next/**
            apps/${{ matrix.slug }}/.next/**
          if-no-files-found: ignore

  deploy_staging:
    name: Deploy Staging (${{ matrix.slug }})
    runs-on: ubuntu-latest
    needs: build_audit
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    defaults:
      run:
        working-directory: apps/${{ matrix.slug }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler@4.40.2

      - name: Cloudflare Deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ -f package.json ]; then
            npm run cf:build
            npm run cf:deploy
          fi

      - name: D1 migrations (if schema present)
        if: hashFiles('apps/${{ matrix.slug }}/db/schema.sql') != ''
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CF_D1_DB_NAME: ${{ secrets.CF_D1_DB_NAME }}
        run: |
          if [ -n "${CF_D1_DB_NAME:-}" ]; then
            wrangler d1 execute "$CF_D1_DB_NAME" --file=db/schema.sql || true
            if [ -f db/seed.sql ]; then wrangler d1 execute "$CF_D1_DB_NAME" --file=db/seed.sql || true; fi
          fi

      - name: Staging summary
        if: always()
        run: |
          echo "### ${{ matrix.slug }} deployed to staging âœ…" >> $GITHUB_STEP_SUMMARY

  promote_production:
    name: Promote to Production (${{ matrix.slug }})
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.event_name == 'workflow_dispatch' && inputs.promote_prod == true
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    environment:
      name: production
      url: https://example.com
    defaults:
      run:
        working-directory: apps/${{ matrix.slug }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm i -g wrangler@4.40.2

      - name: Promote canary (placeholder)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Implement traffic split / version promotion if needed."
          echo "âœ… Production promotion completed (placeholder)."

      - name: Production summary
        if: always()
        run: |
          echo "### ${{ matrix.slug }} promoted to production ðŸš€" >> $GITHUB_STEP_SUMMARY

